# This workflow will build and publish the final artifact
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Finalization

on:
  push:
    branches:
      - XXXXdevelop

jobs:
  finalize:
    env:
      CLONE_URL: ${{ github.event.pull_request.base.repo.clone_url }}
      BRANCH_NAME: ${{ github.head_ref }}
    runs-on: ubuntu-latest
    steps:
      - name: "Dump GitHub context"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ENTANDO_BOT_TOKEN }}
      - name: "Cache Maven packages"
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: "Set up JDK 11"
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: "Create new tag"
        env:
          TMPDIR: "/home/runner/work/_temp"
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          git config --global user.email "cicd@entando.com"
          git config --global user.name "firegloves"
          # fetch tags
          git fetch --tag &> /dev/null
          # set version
          # TODO switch next 2 lines and check that the new solution works. the first returns a text ordered list (not numeric)
          lastTag=$(git describe --tags $(git rev-list --tags --max-count=1) | sed 's/^v\(.*\)/\1/')
          # if there isn't an existing tag => set a default value to 0.0.0
          if [[ -z "$lastTag" ]]; then
            lastTag="v0.0.0"
          fi
          IFS='.' read -r X Y Z <<< "$lastTag"
          X="${X//v/}"    # tag version to pom version
          Z=$((Z+1))
          mvn versions:set -DnewVersion="$X.$Y.$Z" > "$TMPDIR/mvn-version.log"
          echo "Version updated"
          # compile
          mvn compile > "$TMPDIR/mvn-compile.log" || {
            cat "$TMPDIR/mvn-compile.log"
            exit $FILENO
          }
          # checkout milestones branch
          BRANCH_NAME="rel_v$X.$Y.$Z"
          git checkout -b "$BRANCH_NAME"
          # commit
          git add .
          git commit -m "v$X.$Y.$Z"
          # tag
          git tag "v$X.$Y.$Z"
          # push
          git push --set-upstream origin "$BRANCH_NAME" --force
          git push --tags
          # delete branches
          git checkout "$DEFAULT_BRANCH"
          git push -d origin "$BRANCH_NAME"
          git branch -D "$BRANCH_NAME"
